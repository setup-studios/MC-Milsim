plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'java'
    id 'org.jetbrains.dokka' version '2.0.0'
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(22)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Example mod dependency with JEI - using fg.deobf() ensures the dependency is remapped to your development mappings
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : mod_name,
                    "Implementation-Version"  : mod_version,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// Dokka configuration
dokkaHtml {
    outputDirectory.set(layout.buildDirectory.dir("dokka/html"))

    dokkaSourceSets {
        main {
            // Explicitly point to your Java source directory
            sourceRoots.from("src/main/java")

            // You might also need to specify the platform
            platform.set(org.jetbrains.dokka.Platform.jvm)

            documentedVisibilities.set([
                    org.jetbrains.dokka.DokkaConfiguration.Visibility.PUBLIC,
                    org.jetbrains.dokka.DokkaConfiguration.Visibility.PROTECTED
            ])

            externalDocumentationLink {
                url.set(new URL("https://docs.oracle.com/en/java/javase/22/docs/api/"))
            }

            sourceLink {
                localDirectory.set(file("src/main/java"))
                remoteUrl.set(new URL("https://github.com/setup-studios/MC-Milsim/tree/main/src/main/java"))
                remoteLineSuffix.set("#L")
            }
        }
    }

    pluginsMapConfiguration.set([
            "org.jetbrains.dokka.base.DokkaBase": """{ 
            "footerMessage": "© 2025 MC Milsim"
        }"""
    ])
}

// Enhanced Javadoc configuration with modern sidebar
javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    options.windowTitle = "MC Milsim Docs"
    options.docTitle = "MC Milsim Docs"
    options.header = "<b>MC Milsim</b>"
    options.bottom = "Copyright © 2025 Setup Studios. All rights reserved."
    
    // Enable modern HTML5 with sidebar navigation
    options.addBooleanOption('html5', true)
    options.addStringOption('Xdoclint:none', '-quiet')
    
    // Add links to external documentation
    options.links(
        'https://docs.oracle.com/en/java/javase/22/docs/api/'
    )
    
    // Add search functionality
    options.addBooleanOption('use', true)
    options.addBooleanOption('splitindex', true)
    
    destinationDir = file("${buildDir}/docs/javadoc")
}

// Task to generate both documentation types
task generateAllDocs {
    dependsOn javadoc, dokkaHtml
    doLast {
        println "Standard Javadoc generated at: ${javadoc.destinationDir}"
        println "Dokka documentation generated at: ${dokkaHtml.outputDirectory.get()}"
    }
}

// Task to create a combined documentation site
task combineDocs {
    dependsOn javadoc, dokkaHtml
    
    doLast {
        // Ensure the combined directory exists
        def combinedDir = file("${buildDir}/docs/combined")
        combinedDir.mkdirs()
        
        // Copy Dokka docs to dokka subdirectory  
        copy {
            from dokkaHtml.outputDirectory
            into "${buildDir}/docs/combined/dokka"
        }
        
        // Copy Javadoc to javadoc subdirectory
        copy {
            from javadoc.destinationDir
            into "${buildDir}/docs/combined/javadoc"
        }
        
        // Create an index.html that provides navigation between both
        def indexContent = """
<!DOCTYPE html>
<html>
<head>
    <title>MC Milsim Documentation</title>
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
            margin: 0; 
            padding: 40px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .container { 
            max-width: 900px; 
            margin: 0 auto; 
            background: white;
            border-radius: 12px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        h1 { 
            color: #2c3e50; 
            text-align: center; 
            margin-bottom: 10px;
            font-size: 2.5em;
        }
        .subtitle {
            text-align: center;
            color: #7f8c8d;
            margin-bottom: 40px;
            font-size: 1.1em;
        }
        .doc-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-top: 30px;
        }
        .doc-option { 
            border: 2px solid #ecf0f1;
            padding: 30px; 
            border-radius: 12px;
            background: #fafbfc;
            transition: all 0.3s ease;
            text-align: center;
        }
        .doc-option:hover { 
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.1);
            border-color: #3498db;
        }
        .doc-option h3 { 
            margin-top: 0; 
            color: #2c3e50;
            font-size: 1.3em;
        }
        .doc-option p {
            color: #7f8c8d;
            line-height: 1.6;
            margin: 15px 0 25px;
        }
        .doc-option a { 
            display: inline-block;
            padding: 12px 25px;
            background: linear-gradient(45deg, #3498db, #2980b9);
            color: white;
            text-decoration: none;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        .doc-option a:hover { 
            background: linear-gradient(45deg, #2980b9, #1f4788);
            transform: scale(1.05);
        }
        .dokka-link { background: linear-gradient(45deg, #e74c3c, #c0392b) !important; }
        .dokka-link:hover { background: linear-gradient(45deg, #c0392b, #a93226) !important; }
        
        @media (max-width: 768px) {
            .doc-grid { grid-template-columns: 1fr; }
            .container { padding: 20px; margin: 20px; }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🎮 MC Milsim Documentation</h1>
        <p class="subtitle">Choose your preferred documentation format</p>
        
        <div class="doc-grid">
            <div class="doc-option">
                <h3>🎨 Modern Documentation</h3>
                <p>Beautiful, modern interface with enhanced navigation and styling. Best for browsing and exploring the API.</p>
                <a href="dokka/index.html" class="dokka-link">View Dokka Documentation</a>
            </div>
            
            <div class="doc-option">
                <h3>📚 Standard Javadoc</h3>
                <p>Traditional Javadoc format with modern sidebar. Familiar interface for Java developers, great for quick reference.</p>
                <a href="javadoc/index.html">View Javadoc Documentation</a>
            </div>
        </div>
    </div>
</body>
</html>
        """
        
        new File("${buildDir}/docs/combined/index.html").text = indexContent
        println "Combined documentation site created at: ${buildDir}/docs/combined"
        println "Dokka docs: ${buildDir}/docs/combined/dokka"
        println "Javadoc docs: ${buildDir}/docs/combined/javadoc"
    }
}
