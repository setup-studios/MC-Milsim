plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'java'
    id 'org.jetbrains.dokka' version '2.0.0'
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(22)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Example mod dependency with JEI - using fg.deobf() ensures the dependency is remapped to your development mappings
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : mod_name,
                    "Implementation-Version"  : mod_version,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// Dokka configuration
dokkaHtml {
    outputDirectory.set(layout.buildDirectory.dir("dokka/html"))

    dokkaSourceSets {
        main {
            // Explicitly point to your Java source directory
            sourceRoots.from("src/main/java")

            // You might also need to specify the platform
            platform.set(org.jetbrains.dokka.Platform.jvm)

            documentedVisibilities.set([
                    org.jetbrains.dokka.DokkaConfiguration.Visibility.PUBLIC,
                    org.jetbrains.dokka.DokkaConfiguration.Visibility.PROTECTED
            ])

            externalDocumentationLink {
                url.set(new URL("https://docs.oracle.com/en/java/javase/22/docs/api/"))
            }

            sourceLink {
                localDirectory.set(file("src/main/java"))
                remoteUrl.set(new URL("https://github.com/setup-studios/MC-Milsim/tree/main/src/main/java"))
                remoteLineSuffix.set("#L")
            }
        }
    }

    pluginsMapConfiguration.set([
            "org.jetbrains.dokka.base.DokkaBase": """{ 
            "footerMessage": "© 2025 MC Milsim"
        }"""
    ])
}

// Enhanced Javadoc configuration with all modern Java 22 features
javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    options.windowTitle = "MC Milsim API"
    options.docTitle = "MC Milsim API Documentation"
    options.header = "<b>MC Milsim</b>"
    options.bottom = "Copyright © 2025 Setup Studios. All rights reserved."
    
    // ===== MODERN INTERFACE FEATURES =====
    // Enable HTML5 output (default in Java 22, but explicit is better)
    options.addBooleanOption('html5', true)
    
    // Enable search functionality with index
    options.addBooleanOption('use', true)
    options.addBooleanOption('splitindex', true)
    
    // Enable keywords for better search
    options.addBooleanOption('keywords', true)
    
    // ===== NAVIGATION FEATURES =====
    // Enable module navigation (if you have modules)
    options.addBooleanOption('nomodule', false)
    
    // Create class hierarchy
    options.addBooleanOption('tree', true)
    
    // Show author and version info
    options.addBooleanOption('author', true)
    options.addBooleanOption('version', true)
    
    // ===== ADVANCED FEATURES =====
    // Enable snippets (Java 18+ feature for better code examples)
    options.addBooleanOption('snippets', true)
    
    // Add custom tags for better documentation
    options.addMultilineStringsOption('tag').setValue([
        'apiNote:a:API Note:',
        'implSpec:a:Implementation Requirements:',
        'implNote:a:Implementation Note:'
    ])
    
    // ===== CONDITIONAL NAVIGATION =====
    // These options control when tabs are visible (like IntelliJ behavior)
    
    // Only show "Use" tab when there are actual usages
    options.addBooleanOption('nohelp', false)
    
    // Control what gets included in navigation
    options.addBooleanOption('notimestamp', true)
    
    // ===== SEARCH TAB FEATURES =====
    // Enable comprehensive indexing for search
    options.addStringOption('windowtitle', 'MC Milsim API')
    options.addStringOption('doctitle', 'MC Milsim API Documentation')
    
    // Add external documentation links
    options.links(
        'https://docs.oracle.com/en/java/javase/22/docs/api/'
    )
    
    // ===== SIDEBAR AND LAYOUT =====
    // Custom CSS for modern sidebar and layout
    def customCss = createModernJavadocCSS()
    if (customCss) {
        options.addStringOption('stylesheetfile', customCss)
    }
    
    // Add custom JavaScript for enhanced navigation
    def customJs = createJavadocJS()
    if (customJs) {
        options.addFileOption('additionalparam', file(customJs))
    }
    
    destinationDir = file("${buildDir}/docs/javadoc")
}

// Create modern CSS with sidebar and conditional navigation
def createModernJavadocCSS() {
    def cssFile = file("${buildDir}/javadoc-modern.css")
    cssFile.parentFile.mkdirs()
    
    def cssContent = """
/* ===== MODERN SEARCH INTERFACE ===== */
.search-container {
    position: sticky;
    top: 0;
    z-index: 1000;
    background: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
    padding: 12px;
}

.ui-autocomplete-input, input[type="search"] {
    width: 100% !important;
    max-width: 300px;
    padding: 8px 16px 8px 40px;
    border: 1px solid #ced4da;
    border-radius: 20px;
    font-size: 14px;
    background: white url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="%23666"><path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/></svg>') no-repeat 12px center;
    transition: all 0.2s;
}

.ui-autocomplete-input:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
}

/* ===== MODERN SIDEBAR ===== */
.navigation {
    position: fixed;
    left: 0;
    top: 0;
    width: 280px;
    height: 100vh;
    background: #f8f9fa;
    border-right: 1px solid #dee2e6;
    overflow-y: auto;
    z-index: 999;
}

.content {
    margin-left: 280px;
    min-height: 100vh;
}

/* ===== CONDITIONAL TAB VISIBILITY ===== */
.tab-nav {
    display: flex;
    background: white;
    border-bottom: 1px solid #dee2e6;
    overflow-x: auto;
}

.tab-nav a {
    padding: 12px 20px;
    color: #6c757d;
    text-decoration: none;
    border-bottom: 3px solid transparent;
    white-space: nowrap;
    transition: all 0.2s;
}

.tab-nav a:hover {
    color: #007bff;
    background: #f8f9fa;
}

.tab-nav a.active {
    color: #007bff;
    border-bottom-color: #007bff;
    font-weight: 500;
}

/* Hide tabs when not relevant */
.tab nav a.disabled {
    display: none;
}

/* ===== ENHANCED TYPOGRAPHY ===== */
body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    line-height: 1.6;
    color: #212529;
}

h1, h2, h3, h4, h5, h6 {
    font-weight: 600;
    margin-top: 1.5em;
    margin-bottom: 0.5em;
}

/* ===== CODE BLOCKS ===== */
pre, code {
    font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
    font-size: 0.9em;
}

pre {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 6px;
    padding: 16px;
    overflow-x: auto;
    margin: 1em 0;
}

code {
    background: #f1f3f4;
    padding: 2px 6px;
    border-radius: 3px;
    color: #e83e8c;
}

/* ===== TABLES ===== */
.memberSummary, .typeSummary {
    width: 100%;
    border-collapse: collapse;
    margin: 1em 0;
    background: white;
    border-radius: 6px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.memberSummary th, .memberSummary td,
.typeSummary th, .typeSummary td {
    padding: 12px 16px;
    text-align: left;
    border-bottom: 1px solid #f1f3f4;
}

.memberSummary th, .typeSummary th {
    background: #f8f9fa;
    font-weight: 600;
    color: #495057;
}

.memberSummary tr:hover, .typeSummary tr:hover {
    background: #f8f9fa;
}

/* ===== RESPONSIVE DESIGN ===== */
@media (max-width: 768px) {
    .navigation {
        transform: translateX(-100%);
        transition: transform 0.3s;
    }
    
    .navigation.open {
        transform: translateX(0);
    }
    
    .content {
        margin-left: 0;
    }
    
    .tab-nav {
        flex-wrap: wrap;
    }
}

/* ===== DARK MODE SUPPORT ===== */
@media (prefers-color-scheme: dark) {
    body {
        background: #1a1a1a;
        color: #e9ecef;
    }
    
    .navigation {
        background: #2d3748;
        border-color: #4a5568;
    }
    
    pre {
        background: #2d3748;
        border-color: #4a5568;
        color: #e9ecef;
    }
    
    .memberSummary, .typeSummary {
        background: #2d3748;
    }
    
    .memberSummary th, .typeSummary th {
        background: #4a5568;
    }
}
"""
    
    cssFile.text = cssContent
    return cssFile.absolutePath
}

// Create JavaScript for enhanced navigation behavior
def createJavadocJS() {
    def jsFile = file("${buildDir}/javadoc-enhanced.js")
    jsFile.parentFile.mkdirs()
    
    def jsContent = """
// Enhanced Javadoc navigation
document.addEventListener('DOMContentLoaded', function() {
    // Hide tabs that don't have content (like IntelliJ behavior)
    const tabs = document.querySelectorAll('.tab-nav a');
    tabs.forEach(tab => {
        const href = tab.getAttribute('href');
        if (href && href.includes('package-use') || href.includes('class-use')) {
            // Check if the linked page has actual content
            fetch(href, { method: 'HEAD' })
                .then(response => {
                    if (!response.ok) {
                        tab.style.display = 'none';
                    }
                })
                .catch(() => {
                    tab.style.display = 'none';
                });
        }
    });
    
    // Enhanced search functionality
    const searchInput = document.querySelector('input[type="search"]');
    if (searchInput) {
        searchInput.placeholder = 'Search (MC Milsim API)';
        
        // Add live search filtering
        searchInput.addEventListener('input', function(e) {
            const query = e.target.value.toLowerCase();
            // Implementation for live filtering would go here
        });
    }
    
    // Mobile navigation toggle
    const navToggle = document.createElement('button');
    navToggle.innerHTML = '☰';
    navToggle.style.cssText = 'position:fixed;top:10px;left:10px;z-index:1001;background:#007bff;color:white;border:none;padding:8px 12px;border-radius:4px;display:none;';
    
    if (window.innerWidth <= 768) {
        navToggle.style.display = 'block';
        document.body.appendChild(navToggle);
        
        navToggle.addEventListener('click', function() {
            const nav = document.querySelector('.navigation');
            nav.classList.toggle('open');
        });
    }
});
"""
    
    jsFile.text = jsContent
    return jsFile.absolutePath
}

// Task to generate both documentation types
task generateAllDocs {
    dependsOn javadoc, dokkaHtml
    doLast {
        println "Standard Javadoc generated at: ${javadoc.destinationDir}"
        println "Dokka documentation generated at: ${dokkaHtml.outputDirectory.get()}"
    }
}

// Task to create a combined documentation site
task combineDocs {
    dependsOn javadoc, dokkaHtml
    
    doLast {
        // Ensure the combined directory exists
        def combinedDir = file("${buildDir}/docs/combined")
        combinedDir.mkdirs()
        
        // Copy Dokka docs to dokka subdirectory  
        copy {
            from dokkaHtml.outputDirectory
            into "${buildDir}/docs/combined/dokka"
        }
        
        // Copy Javadoc to javadoc subdirectory
        copy {
            from javadoc.destinationDir
            into "${buildDir}/docs/combined/javadoc"
        }
        
        // Create an index.html that provides navigation between both
        def indexContent = """
<!DOCTYPE html>
<html>
<head>
    <title>MC Milsim Documentation</title>
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
            margin: 0; 
            padding: 40px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .container { 
            max-width: 900px; 
            margin: 0 auto; 
            background: white;
            border-radius: 12px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        h1 { 
            color: #2c3e50; 
            text-align: center; 
            margin-bottom: 10px;
            font-size: 2.5em;
        }
        .subtitle {
            text-align: center;
            color: #7f8c8d;
            margin-bottom: 40px;
            font-size: 1.1em;
        }
        .doc-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-top: 30px;
        }
        .doc-option { 
            border: 2px solid #ecf0f1;
            padding: 30px; 
            border-radius: 12px;
            background: #fafbfc;
            transition: all 0.3s ease;
            text-align: center;
        }
        .doc-option:hover { 
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.1);
            border-color: #3498db;
        }
        .doc-option h3 { 
            margin-top: 0; 
            color: #2c3e50;
            font-size: 1.3em;
        }
        .doc-option p {
            color: #7f8c8d;
            line-height: 1.6;
            margin: 15px 0 25px;
        }
        .doc-option a { 
            display: inline-block;
            padding: 12px 25px;
            background: linear-gradient(45deg, #3498db, #2980b9);
            color: white;
            text-decoration: none;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        .doc-option a:hover { 
            background: linear-gradient(45deg, #2980b9, #1f4788);
            transform: scale(1.05);
        }
        .dokka-link { background: linear-gradient(45deg, #e74c3c, #c0392b) !important; }
        .dokka-link:hover { background: linear-gradient(45deg, #c0392b, #a93226) !important; }
        
        @media (max-width: 768px) {
            .doc-grid { grid-template-columns: 1fr; }
            .container { padding: 20px; margin: 20px; }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🎮 MC Milsim Documentation</h1>
        <p class="subtitle">Choose your preferred documentation format</p>
        
        <div class="doc-grid">
            <div class="doc-option">
                <h3>🎨 Modern Documentation</h3>
                <p>Beautiful, modern interface with enhanced navigation and styling. Best for browsing and exploring the API.</p>
                <a href="dokka/index.html" class="dokka-link">View Dokka Documentation</a>
            </div>
            
            <div class="doc-option">
                <h3>📚 Standard Javadoc</h3>
                <p>Traditional Javadoc format with modern sidebar. Familiar interface for Java developers, great for quick reference.</p>
                <a href="javadoc/index.html">View Javadoc Documentation</a>
            </div>
        </div>
    </div>
</body>
</html>
        """
        
        new File("${buildDir}/docs/combined/index.html").text = indexContent
        println "Combined documentation site created at: ${buildDir}/docs/combined"
        println "Dokka docs: ${buildDir}/docs/combined/dokka"
        println "Javadoc docs: ${buildDir}/docs/combined/javadoc"
    }
}
